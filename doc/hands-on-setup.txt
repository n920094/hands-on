// -*- mode:doc; coding:utf-8 -*-

:Author:      河野達也 Tatsuya_Kawano CloudianKK
:Email:       tkawano@cloudian.com
:Date:        2013年1月N日
:Revision:    v1.1

// この文書はAsciiDoc形式で記述されています。
// HTML形式に変換するには以下のようにします。
//
// # Fedora、CentOSの場合
// $ sudo yum install asciidoc source-highlight
// $ asciidoc hands-on-setup1.txt
//
// # Ubuntuの場合
// $ sudo apt-get install asciidoc source-highlight
// $ asciidoc hands-on-setup1.txt
//


= NOSQL実機ハンズオン（Riak、Hibari）付録　環境設定手順

*日本OSS推進フォーラム　若手技術者勉強会*


== 目次

- link:#0[0. 使用許諾条件]

- link:#1[1. 概要]
  * link:#1-1[1-1. 目的]

- link:#N[N. 検証用マシンのセットアップ]
  * link:#N-M[N-M. Oracle VirtualBox]
  * link:#N-M[N-M. Fedora 17]
  * link:#N-M[N-M. CentOS 6.3]
  * link:#N-M[N-M. OSインストール後の作業]

- link:#N[N. ハンズオン用ファイルのセットアップ]

- link:#N[N. Erlangのセットアップ]

- link:#N[N. Riakのセットアップ]

- link:#N[N. Hibariのセットアップ]

- link:#N[N. BashoBenchのセットアップ]
  * link:#N-M[N-M. ]


[[0]]
== 0. 使用許諾条件

この文書は *クリエイティブ・コモンズ 表示 2.1 日本 (CC BY 2.1 JP) ライセンス*
の下に提供されています。原著作者のクレジットを表示する場合に限り、あな
たは自由に、この文書を再配布したり、二次的著作物を作成したり、営利目的
で利用したりできます。使用許諾条件を見るには、
http://creativecommons.org/licenses/by/2.1/jp/ をチェックしてください。


[[1]]
== 1. 概要

*TODO*

以下のソフトウェアで動作確認済みです。

- Oracle VM VirtualBox 4.2.6 for Mac OS X
- Fedora 17 および CentOS 6.3（いずれも64ビット版）
- Erlang/OTP 15B03-1
- Riak 1.2.1
- Hibari 0.1.9 XX

対象:

主にLinuxの初心者


[[N]]
== N. 検証用マシンのセットアップ

RHEL（Red Hat Enterprise Linux）、CentOS、Fedora
64ビット版

- VirtualBox、OpenStack...
- Amazon EC2、さくらVPS、Cloudn...

- NIIの環境（CentOS 5.8 64ビット版）


Post installation:

- vm.swappiness
- ファイルディスクリプター
- Ethernetまわり
- noatime


=== OSインストーラーのダウンロード

Fedora 17、以下の
- Fedora-17-x86_64-Live-Desktop.iso

CentOS 6
- CentOS-6.3-86_64-minimal.iso

CentOS 5.3
- *TODO*


=== N.M VirtualBoxによる仮想マシンの作成

Oracle VM VirtualBoxによる仮想マシンの作成方法を説明します。

システム要件

- オペレーシングシステム： Windows XX、Mac OS X、Linux ...
- に対応したCPU
- Fedora 17でRiak、Hibari、Basho Benchを動作させるなら、RAM N GB以上を
  推奨


VirtualBoxの *ホストオンリーアダプター* の設定::

- VirtualBox メニューから *環境設定* を選びます。
- *ネットワーク* アイコンをクリックし、ウィンドウ右側の「＋印」のつい
  たアイコンをクリックします。
- ホストオンリーネットワークとして *vboxnet0* が追加されたら *OK* ボタ
  ンを押します。


==== 仮想マシンの作成

- *Oracle VM VirtualBoxマネージャー* ウィンドウの *新規* ボタンをクリッ
   クします。

- *名前とオペレーティングシステム* ウィンドウが開いたら以下の情報を入
   力します。
  * *名前* ：任意の仮想マシン名（例 Fedora 17 NOSQL）
  * *タイプ* ：Linux
  * *バージョン* ：Fedora (64 bit)

- *続ける* をクリックします。

- *メモリサイズ* ウィンドウでは仮想マシンに割り当てるRAMサイズを設定し
   ます。 ホストマシンのRAMに載りきる範囲内で、できるだけ大きなサイズ
   を設定します。（例 2048MB）

- *ハードドライブ* ウィンドウでは *仮想ハードドライブを作成する* を選
   択し *作成* ボタンを押します。

- *ハードドライブのタイプ* ウィンドウでは、設定はそのまま（例 VDI）で
   *続ける* ボタンを押します。

- *物理ハードドライブにあるストレージ* を選択します。
  * ホストマシンのハードドライブ容量を少なく抑えたい場合は *可変サイズ*
    を選択
  * 性能をできるだけ高くしたい場合は *固定サイズ* を選択

- *ファイルの場所とサイズ* ウィンドウでは、仮想ハードドライブのサイズ
   を *20GB* 程度に設定します。仮想ハードドライブファイルの名前はその
   ままでいいでしょう。サイズを設定したら *作成* ボタンをクリックしま
   す。

- *Oracle VM VirtualBoxマネージャー* ウィンドウに戻ったら、いま作成し
   た仮想マシンが選択されていることを確認し *設定* ボタンを押します。

- 設定用のウィンドウが開いたら *システム* をクリックし、 さらに
  *プロセッサー* タブに切り替えます。ホストマシンに搭載されたCPUが対応
  できる範囲で、できるだけ大きな数を設定します。

- *ネットワーク* をクリックします。
  * *アダプター１* は *NAT* のままにしておきます
  * ホストマシンから ssh で接続するために *アダプター２* を有効化し、
    *割り当て* に *ホストオンリーアダプター* を選択し、 *名前* に
    *vboxnet0* を選択します。

- *OK* をクリックします。


==== Fedora 17のインストール

- *起動* ボタンをクリックします。

- *Select start-up disk* ウィンドウではフォルダーアイコンをクリックし、
  *Fedora 17 Live CD* の ISO イメージファイル
   （例 *Fedora-17-x86_64-Live-Desktop.iso* ）を選択します。

- *Start* ボタンを押すと仮想マシンが起動します。

- *Welcome to Fedora* 画面が開いたら *Install to Hard Drive* をクリッ
   クします。

- 最初の画面でキーボード配列を選択します。（例 Japanese）

- 次の画面では *Basic Storage Devices* を選択します。

- The storage device below may contain dataと表示されたら
  *Yes, discard any data* （全データを削除する）をクリックします。

- 次の画面では任意の *Hostname* を設定します。
  （例 fedora17-nosql.localdomain）

- 次の画面ではタイムゾーンを設定します。（例 Asia/Tokyo）

- 次の画面では root アカウントのパスワードを６文字以上で設定します。
  （例 nosql2root）　もし weak password（脆弱なパスワード）と表示され
  たら、*Cancel* を押して再設定するか、 *Use anyway* を押してそのまま
  使用するか選びます。

- 次の画面では *Use All Space* を選択します。 *Next* ボタンを押すと
  *Confirm* ウィンドウが表示されるので、 *Write changes to disk* をク
  リックします。

- Live CDのデータがハードドライブにコピーされるまで数分かかります。

- *Conguraturations, your Fedora installation is complete.* と表示され
   たら、 VirtualBoxウィンドウ下側にあるCDのアイコンをクリックして
   *Remove disk from virtual drive* を選択します。 *Reboot* ボタンをク
   リックして再起動します。

- 再起動後 *Welcome* 画面が開いたら *Forward* ボタンを押します。

- *License Information* を読んで *Forward* ボタンを押します。

:handsonuser: ossforum
:handsonpw:   nosql2

- *Create User* 画面でハンズオンで使用するユーザー
  （例 Username: *{handsonuser}* 、Password: *{handsonpw}* ）
  を作成します。 *Add to Administrators group* をオンにします。

- *Date and Time* 画面では *Synchronize date and time over the
   network* をオンにします。

- *Hardware Profile* 画面では、Fedoraプロジェクトに匿名のハードウェア
   情報を送信するかどうかを選択してください。

- *Finish* ボタンを押すとセットアップが完了します。先ほど作成したハン
   ズオン用ユーザーでログインします。


==== Fedoraの各パッケージを最新版に更新する

- 画面左上の *Activities* をクリックし *up* とタイプします。 *Software
  Update* のアイコンが表示されたら、クリックして起動します。

- 更新が必要なパッケージが表示されたら *Install Update* ボタンをクリッ
  クしてインストールします。初回は数百個のパッケージが更新されるので少
  し時間がかかるかもしれません。

- もし更新後に再起動を促されたら *Restart* ボタンを押して再起動します。


==== VirtualBox Guest Additionsのインストール

- ここからは主にターミナル（端末）で作業します。 *Activities* をクリッ
  クして *ter* と入力します。 *Terminal* アイコンが表示されたらクリッ
  クして起動します。


- ターミナルで以下のコマンドを実行します。パスワードを聞かれたら、いま
  ログインしているユーザー（ハンズオンユーザー）のパスワードを入力しま
  す。


[source,shell]
----
# □で改行キーを押します

$ sudo yum -y update kernel □
$ sudo yum -y install kernel-devel kernel-headers dkms gcc gcc-c++ □
----

念のため再起動します。

[source,shell]
----
$ sudo reboot □
----

再起動したらGuest Additionsをインストールします。

- VirtualBoxの *Devices* メニューから *Install Guest Addtions* を選択
  します。

- もし自動的に実行するか聞かれたら、*Cancel* をクリックします。

- ターミナルを開き以下のコマンドを実行します。

[source,shell]
----
# ログインユーザー名の部分を実際のユーザー名（例 ossforum）で
# 置き換えてください。

$ cd /run/media/ログインユーザー名/VBOX* □
$ sudo sh VBoxLinuxAdditions.run □

# スクリプトが実行され、OKが表示されていきます。

$ sudo reboot □
----

再起動すると画面のサイズを大きく設定できるようになります。VirtualBoxウィ
ンドウ右下のCDアイコンから *Remove disk from virtual drive* を選び、
Guest AddtionsのCDを取り出します。


=== インストール後の作業

Firewall

[source,shell]
----
$ sudo service iptables stop □
$ sudo chkconfig iptables off □
----


openssh-server:

[source,shell]
----
$ sudo service sshd start □
$ sudo chkconfig sshd on □
----

SSHで接続::

Macの場合、ホストOSから

[source,shell]
----
$ ssh ossforum@fedora17-nosql
----

Windowsの場合、
まずFedora側で、
----
$ ifconfig
----
Windows側でPuTTYなどを立ち上げ、


スナップショットの取得:

*TODO*


[[N]]
== N. ハンズオン用ファイルのセットアップ

[source,shell]
----
$ sudo yum install -y git rlwrap □
----

[source,shell]
----
$ cd □
$ git clone git://github.com/ossforum-jp-nosql/hands-on.git □
$ git checkout v1.1-Jan-2013 □
----

任意

[source,shell]
----
$ sudo yum install -y emacs emacs-erlang □
----

[source,shell]
----
$ echo "source ~/hands-on/bin/bashrc.ossforum" >> .bashrc □
$ source ~/.bashrc □
----

bashrc.ossforumによって以下の設定がされます。

- RIAK_HOME を $HOME/riak に設定
- HIBARI_HOME を $HOME/hibari/hibari に設定
- BASHO_BENCH_HOME を $HOME/basho_bench に設定
- $PATH 変数（コマンドのサーチパス）に以下のディレクトリーを追加
  * $HOME/bin
  * $HOME/hands-on/bin
  * $RIAK_HOME/rel/riak1/bin
  * $HIBARI_HOME/rel/hibari1/bin
  * $BASHO_BENCH_HOME


[[N]]
== N. Erlang/OTPのセットアップ

Riak や Hibari のインストールに先立って Erlang/OTP（以下Erlang）をソー
スコードからビルドし、インストールします。 Erlang のバージョンは現時点
（2013年１月）の最新版である R15B03-1 を使います。


=== N.M. Erlangのビルドに必要なソフトウェアのインストール

最初に Erlang のビルドに必要なソフトウェアをインストールします。

[source,shell]
----
$ sudo yum install -y gcc glibc-devel make ncurses-devel openssl-devel autoconf □
----


=== N.M. Kerlのインストール

[source,shell]
----
$ mkdir ~/bin □
$ curl https://raw.github.com/spawngrid/kerl/master/kerl > ~/bin/kerl □
$ chmod a+x ~/bin/kerl □
$ echo 'KERL_CONFIGURE_OPTIONS="--enable-hipe --enable-smp-support --enable-threads --enable-kernel-poll" ' > ~/.kerlrc □
----


=== N.M.

[source,shell]
----
$ kerl build R15B03-1 r15b03-1 □
----

Erlangのソースコードがダウンロードされ、ビルドが実行されます。マシンの
性能によりますが、一般的なマシンなら15分ほどかかります。ビルドに成功し
たら Erlang/OTP R15B03-1 (r15b03-1) has been successfully built と表示
されます。

Erlangをログインしているユーザーのホームディレクトリーにインストールし
ます。

----
$ kerl install r15b03-1 ~/erlang/r15b03-1 □
----

Erlang R15B03-1を


[source,shell]
----
$ sudo yum install -y nano □
$ echo ". ~/erlang/r15b03-1/activate" >> .bashrc □
----

[source,shell]
----
$ source .bashrc □
----

試しに Erlang のシェルを起動してみましょう。

[source,shell]
----
$ erl □
Erlang R15B03 (erts-5.9.3.1) [source] [64-bit] [smp:2:2] [async-threads:0] [hipe] [kernel-poll:false]

Eshell V5.9.3.1 (abort with ^G)
1>
----

Erlang シェルは q コマンドで終了できます。

[source,shell]
----
1> q(). □
ok
----

これでErlangのセットアップは完了です。


[[N]]
== N. Riakのセットアップ

Riak をソースコードからビルドして、ハンズオン向けにセットアップします。

Note: Riakはビルド済みのパッケージからインストールすることもできます。
詳しくは http://docs.basho.com/riak/1.2.1/tutorials/installation/Installing-on-RHEL-and-CentOS/
を参照してください。

まず Riak のビルドに必要なソフトウェアをインストールします。ターミナル
で以下のコマンドを実行します。

[source,shell]
----
$ sudo yum install gcc gcc-c++ glibc-devel make git wget □
----

Riakのソースコードをダウンロードします。

[source,shell]
----
$ cd □
$ wget http://downloads.basho.com.s3-website-us-east-1.amazonaws.com/riak/1.2/1.2.1/riak-1.2.1.tar.gz □
$ tar zxvf riak-1.2.1.tar.gz □
$ ln -s riak-1.2.1 riak □
----

Riakをビルドします。

[source,shell]
----
$ cd $RIAK_HOME □
$ make rel □
----

ビルドが終わるとRiakの実行ファイルが $RIAK_HOME/rel のriakディレクトリーに作られます。ハンズオンでは１つのマシンで４つのRiakノードを稼働させるので、riakディレクトリーを４つに複製します。

[source,shell]
----
$ cd $RIAK_HOME/rel
$ mv riak riak1
$ cp -rp riak1 riak2
$ cp -rp riak1 riak3
$ cp -rp riak1 riak4
----

Riakの設定ファイルを以下のように変更します。

- $RIAK_HOME/rel/riakN/etc/vm.args
  * Riakノード名を riakN@127.0.0.1 に変更
- $RIAK_HOME/rel/riakN/etc/app.config
  * 各種通信ポートを、Riakノード毎にユニークなものに変更
    ** Protocol Buffers: 8091, 8092, 8093, 8094
    ** HTTP: 8081, 8082, 8083, 8084
    ** ハンドオフ: 8191, 8192, 8193, 8194
  * ストレージバックエンドを LevelDB に切り替えることで、インデックス
    機能が使えるようにします。

シェルスクリプトを用意しましたので、実行してください。

[source,shell]
----
$ riak-update-node-conf-ossforum.sh □
updated vm.args and app.config for riak1
updated vm.args and app.config for riak2
updated vm.args and app.config for riak3
updated vm.args and app.config for riak4
----


Riakクラスターを初期化します。シェルスクリプトを用意しましたので、実行
してください。

まずRiakを起動します。

[source,shell]
----
$ riak-start-ossforum.sh □
riak1 started
riak2 started
...（略）

$ riak-ping-ossforum.sh □
riak1 ... pong
riak2 ... pong
...（略）
----

Riakクラスターを組みます。
[source,shell]
----
$ riak-build-cluster.sh □

 Success: staged join request for 'riak2@127.0.0.1' to 'riak1@127.0.0.1'
 Success: staged join request for 'riak3@127.0.0.1' to 'riak1@127.0.0.1'
 =============================== Staged Changes ================================
 Action         Nodes(s)
 -------------------------------------------------------------------------------
 join           'riak2@127.0.0.1'
 join           'riak3@127.0.0.1'
 -------------------------------------------------------------------------------


 NOTE: Applying these changes will result in 1 cluster transition

 ###############################################################################
                         After cluster transition 1/1
 ###############################################################################

 ================================= Membership ==================================
 Status     Ring    Pending    Node
 -------------------------------------------------------------------------------
 valid     100.0%     50.0%    'riak1@127.0.0.1'
 valid       0.0%     25.0%    'riak2@127.0.0.1'
 valid       0.0%     25.0%    'riak3@127.0.0.1'
 -------------------------------------------------------------------------------
 Valid:3 / Leaving:0 / Exiting:0 / Joining:0 / Down:0

 WARNING: Not all replicas will be on distinct nodes

 Transfers resulting from cluster changes: 4
   2 transfers from 'riak1@127.0.0.1' to 'riak3@127.0.0.1'
   2 transfers from 'riak1@127.0.0.1' to 'riak2@127.0.0.1'

 Cluster changes committed
 ================================= Membership ==================================
 Status     Ring    Pending    Node
 -------------------------------------------------------------------------------
 valid      50.0%      --      'riak1@127.0.0.1'
 valid      25.0%      --      'riak2@127.0.0.1'
 valid      25.0%      --      'riak3@127.0.0.1'
 -------------------------------------------------------------------------------
 Valid:3 / Leaving:0 / Exiting:0 / Joining:0 / Down:0
----

バケットを作成します。

[source,shell]
----
$ riak-create-buckets-ossforum.escript □
Created {<<"employee">>,{n_val,3},{r,quorum},{w,quorum},{dw,quorum}}
Created {<<"basho_bench_test">>,{n_val,3},{r,quorum},{w,quorum},{dw,quorum}}

----

これでRiakのセットアップは完了です。


[[N]]
== N. Hibariのセットアップ

をソースコードからビルドして、ハンズオン向けにセットアップします。

Hibariのソースコードの取得に必要なrepoというツールをインストールします。

[source,shell]
----
$ curl https://dl-ssl.google.com/dl/googlesource/git-repo/repo > ~/bin/repo □
$ chmod a+x ~/bin/repo □
----

Hibariのソースコードのダウンロードしましょう。まずhibariディレクトリーを作成して、repoのinitコマンドで初期化します。

[source,shell]
----
$ mkdir ~/hibari □
$ cd ~/hibari □
$ repo init -u git://github.com/hibari/manifests.git -m hibari-default.xml -b dev □
...（中略）
Your Name [ossforum]: □（そのまま改行キーを押す）
Your Email [ossforum@...]: □（そのまま改行キーを押す）

Your identity is: ...
is this correct [y/N]? y □
...（中略）
Enable color display in this user account (y/N)? y □

repo initialized in /home/ossforum/hibari
----

次にrepoのsyncコマンドを使って、ソースコードを取得します。

[source,shell]
----
$ repo sync □
...（中略）
Fetching projects: 100% (22/22), done.
----

git branchとcheckoutコマンドで、Hibariの開発版のソースコードに切り替えます。

[source,shell]
----
$ repo forall -c "git branch dev origin/dev" □
$ repo forall -c "git checkout dev" □
----

ハンズオンでは１つのマシンで３つのHibariノードを稼働させますが、Hibari
クライアント向けのThriftポートやS3ポートがノード間で競合してしまいます。
設定で各ノードのポートをずらすこともできますが、そもそも今回のハンズオ
ンではThriftやS3は使わないので、これらの機能はオフにしてしまいます。

[source,shell]
----
$ cd $HIBARI_HOME □
$ git apply ~/hands-on/patches/hibari_no_ubf.patch □
----

Hibariをソースコードからビルドします。

[source,shell]
----
cd $HIBARI_HOME □
$ make package □
----

ビルドが終わるとRiakの実行ファイルが $HIBARI_HOME/rel のhibariディレクトリーに作られます。ハンズオンの内容にあわせて、hibariディレクトリーを３つに複製します。

[source,shell]
----
$ cd $HIBARI_HOME/rel □
$ mv hibari hibari1 □
$ cp -rp hibari1 hibari2 □
$ cp -rp hibari1 hibari3 □
----

Hibariの設定ファイルを以下のように変更します。

- $HIBARI_HOME/rel/hibariN/releases/0.1.9/vm.args
  * Hibariノード名を hibariN@127.0.0.1 に変更
- $HIBARI_HOME/rel/hibariN/releases/0.1.9/sys.config
  * Hibari Adminノード名を hibari1@127.0.0.1 に変更
  * network_monitor_monitored_nodes を hibari1@127.0.0.1, hibari2@127.0.0.1, hibari3@127.0.0.1 に変更

シェルスクリプトを用意しましたので、実行してください。

[source,shell]
----
$ hibari-update-node-conf-ossforum.sh □
updated vm.args and sys.config for hibari1
updated vm.args and sys.config for hibari2
updated vm.args and sys.config for hibari3
----

これでHibariのセットアップは完了です。


[[N]]
== N. Basho Benchのセットアップ

=== Basho Benchのインストール

[source,shell]
----
$ cd □
$ git clone git://github.com/basho/basho_bench.git □
----


----
$ git checkout  □
----

R のインストール:

*TODO*

Riak Client のインストール:

*TODO*
