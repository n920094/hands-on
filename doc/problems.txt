
== 3. Riakの基本操作

- Riakの起動と停止 *OK*

- ProtoBufsでアクセス（Erlang）
  * Riakに接続 *OK*
  * インデックス付きの、キーバリューを格納 *OK*
  * キーを指定してキー・バリューを取り出し *OK*
  * インデックスを用いた検索 *OK*
  * キー・バリューの削除
  * Map Reduceによる集計
  * Erlangシェルの終了 *OK*


== 4. データ分散について：コンシステント・ハッシング（その１）

.4-1. クラスター構成の確認 *OK*
.4-2. リングサイズの確認
.4-3. バケット名とキーからハッシュ値を算出 *OK*
.4-4. キーを格納するノードを算出 *OK*
.4-5. ２つ以上の複製が１つのメンバーノードに格納されるケース *OK*
.4-6. ２つ以上の複製を１つのメンバーノードに置かない方法 *OK*
.4-7. メンバーノードの追加とデータのリバランス（再配置） *OK*

- Riakの停止 *OK*


== 6. Hibariの基本操作

- Hibariの起動と停止 *OK*
- テーブルの作成 *OK*

- Erlangネイティブクライアントでアクセス
  * テーブルの作成 *OK*
  * Hibariに接続 *OK*
  * キーバリューの書き込み *OK*
  * キー・バリューの読み出し *OK*
  * メタデータ付きの、キーバリューを書き込み
  * 複数のキー・バリューをアトミックに書き込み *OK*
  * キーの区切り文字とレンジスキャン *OK*
  * キー・バリューの削除
  * Erlangシェルの終了 *OK*


== 7. データ分散について：コンシステント・ハッシング（その２）

.7-1. クラスター構成の確認 *OK*
.7-2. チェインの確認 *OK*
.7-3. Basho Benchの実行 *OK*
.7-4. グラフのプロット（R言語）と結果の確認 *OK*
.7-5. キーに連番を使用した場合の分散状況 *OK*
.7-6. キーにばらつきのある値を使用した場合の分散状況 *OK*

- Hibariの停止 *OK*
- 時間が余ったら（RiakでBasho Benchの実行）


== 8. HBaseの基本操作

- HBaseの起動 *OK*

- HBaseシェルでアクセス
  * テーブルの作成 *OK*
  * HBaseに接続
  * 行の書き込み
  * 行の読み出し
  * レンジスキャン


== 9. データ分散について：自動シャーディング（その１）

.9-1. クラスター構成の確認 *OK*
.9-2. リージョン数の確認 *OK*
.9-3. リージョンのスタートキー、エンドキーの確認 *OK*
.9-4. YCSBの実行 *OK*
.9-5. 結果の確認
.9-6. キーに連番を使用した場合の分散状況 *OK*
.9-7. キーにばらつきのある値を使用した場合の分散状況 *OK*
.9-8. リージョンが分割されていく様子の観察

- HBaseの停止


== 11. 可用性重視（AP）のNOSQLの挙動

- Riak環境の初期化 *OK*

.11-1. １ノードダウン時の読み出し操作 *OK*
.11-2. １ノードダウン時の書き込み操作 *OK*

- Riakの停止 *OK*


== 13. 整合性重視（CP）のNOSQLの挙動

- Hibari環境の初期化 *OK*

.13-1. １ノードダウン時の読み出し操作
.13-2. １ノードダウン時の書き込み操作
.13-3. CAS操作
.13-4. Hibariのマイクロトランザクション

- Hibariの停止 *OK*


== 15. ログ構造マージツリー（LSMTree）の特性

.15-1. 書き込みを繰り返した時の読み出し性能の劣化
.15-2. メジャーコンパクション後の性能の回復


== 16. グループワーク：HBaseクラスターのセットアップ

